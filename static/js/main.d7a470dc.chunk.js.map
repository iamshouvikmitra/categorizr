{"version":3,"sources":["Categories.js","App.js","serviceWorker.js","index.js"],"names":["Categories","state","items","_this2","this","props","data","map","item","react_default","a","createElement","className","key","id","onClick","handleClick","dangerouslySetInnerHTML","__html","name","Component","App","posts","website","loading","handleChange","e","_this","setState","target","value","console","log","axios","get","then","response","catch","error","handleSubmit","preventDefault","post","title","rendered","excerpt","href","link","rel","action","onSubmit","type","placeholder","onChange","class","src_Categories","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7a470dc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Categories extends Component {\r\n    state = {\r\n        items: null\r\n    }\r\n\r\n    render() {\r\n        let items = this.props.items\r\n        let data = items ? (\r\n            items.map(item=>{\r\n                return(\r\n                    <div className=\"chip\" key={item.id} onClick={()=>{this.props.handleClick(item.id)}} dangerouslySetInnerHTML={{__html: item.name}}>\r\n                    </div>      \r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"chip\">\r\n            No Categories Yet\r\n            </div>\r\n            )\r\n        return (\r\n            <div className=\"container\">\r\n                {data}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Categories;","import React, { Component } from 'react'\nimport Categories from './Categories'\nimport axios from 'axios'\n\nclass App extends Component {\n  state = {\n    items: null,\n    posts: null,\n    website: null,\n    loading: false\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      website: e.target.value\n    })\n  }\n\n  handleClick = (id) => {\n    console.log('Clicked ' + id);\n    this.setState({\n      loading:true\n    })\n    axios.get(\"https://\" + this.state.website + \"/wp-json/wp/v2/posts?per_page=20&categories=\" + id)\n      .then((response) => {\n        this.setState({\n          posts: response.data,\n          loading:false\n        })\n      })\n      .catch(function (error) {\n        console.log(error)\n        this.setState({\n          loading:false\n        })\n      });\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    })\n    console.log(\"https://\" + this.state.website + \"/wp-json/wp/v2/categories/?per_page=100\");\n    axios.get(\"https://\" + this.state.website + \"/wp-json/wp/v2/categories/?per_page=100\")\n      .then((response) => {\n        this.setState({\n          items: response.data,\n          loading: false,\n          posts:null\n        })\n      })\n      .catch(function (error) {\n        this.setState({\n          loading: false\n        })\n        console.log(error);\n      })\n  }\n  render() {\n    let posts = this.state.posts;\n    let data = posts ? (\n      posts.map(post => {\n        return (\n          <div className=\"col s12 m6\" key={post.id}>\n            <div className=\"card\">\n              <div className=\"card-content\">\n                <span className=\"card-title\" dangerouslySetInnerHTML={{ __html: post.title.rendered }}></span>\n                <p dangerouslySetInnerHTML={{ __html: post.excerpt.rendered }}></p>\n              </div>\n              <div className=\"card-action\">\n                <a href={post.link} target=\"_blank\" rel=\"noopener noreferrer\">View Post</a>\n              </div>\n            </div>\n          </div>\n        )\n      })\n    ) : (\n      <div className=\"chip\">\n      No Posts Yet\n      </div>\n      );\n    return (\n      <div className=\"App\">\n        <nav>\n          <div className=\"nav-wrapper red darken 3\">\n            <a href=\"\\home\" className=\"brand-logo center\">Categorizr</a>\n          </div>\n        </nav>\n        <div className=\"section\">\n          <div className=\"container\">\n            <form action=\"\" onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"input-field col s10\">\n                  <input type=\"text\" className=\"active flow-text\" id=\"website\" placeholder=\"Website Name . .\" onChange={this.handleChange} />\n                </div>\n                <button className=\"btn waves-effect waves-light btn-large\" type=\"submit\" name=\"action\">Go <i class=\"material-icons right\">send</i></button>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {\n          this.state.loading ?\n            <div className=\"progress\">\n              <div className=\"indeterminate\"></div>\n            </div> : null\n        }\n\n        <Categories items={this.state.items} handleClick={this.handleClick} />\n        <div className=\"container\">\n          {data}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}